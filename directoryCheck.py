# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import csv

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication
import os
import sys


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(640, 480)
        MainWindow.setMinimumSize(QtCore.QSize(640, 480))
        MainWindow.setMaximumSize(QtCore.QSize(640, 480))
        MainWindow.setWindowOpacity(1.0)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.selectButton = QtWidgets.QPushButton(self.centralwidget)
        self.selectButton.setGeometry(QtCore.QRect(20, 10, 101, 25))
        self.selectButton.setObjectName("selectButton")
        self.listExistFile = QtWidgets.QListWidget(self.centralwidget)
        self.listExistFile.setGeometry(QtCore.QRect(130, 130, 481, 281))
        self.listExistFile.setObjectName("listExistFile")
        self.exportButton = QtWidgets.QPushButton(self.centralwidget)
        self.exportButton.setGeometry(QtCore.QRect(20, 50, 101, 25))
        self.exportButton.setObjectName("exportButton")
        self.selectPath = QtWidgets.QTextEdit(self.centralwidget)
        self.selectPath.setGeometry(QtCore.QRect(130, 10, 481, 25))
        self.selectPath.setObjectName("selectPath")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(20, 230, 91, 51))
        self.pushButton.setObjectName("pushButton")
        self.exportPath = QtWidgets.QTextEdit(self.centralwidget)
        self.exportPath.setGeometry(QtCore.QRect(130, 50, 481, 25))
        self.exportPath.setObjectName("exportPath")
        self.bdNameButton = QtWidgets.QPushButton(self.centralwidget)
        self.bdNameButton.setGeometry(QtCore.QRect(20, 90, 101, 25))
        self.bdNameButton.setObjectName("bdNameButton")
        self.bdNameText = QtWidgets.QTextEdit(self.centralwidget)
        self.bdNameText.setGeometry(QtCore.QRect(130, 90, 481, 25))
        self.bdNameText.setObjectName("bdNameText")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 640, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.selectButton.clicked.connect(self.setSelectPath)
        self.exportButton.clicked.connect(self.setExportPath)
        self.pushButton.clicked.connect(self.exportFile)
        self.listExistFile.clicked.connect(self.itemClick)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "目录文件检索工具"))
        self.selectButton.setText(_translate("MainWindow", "选择检索目录"))
        self.exportButton.setText(_translate("MainWindow", "结果保存路径"))
        self.pushButton.setText(_translate("MainWindow", "导出文件"))
        self.bdNameButton.setText(_translate("MainWindow", "营业部全称"))

    def setSelectPath(self):
        try:
            # 调用QtWidgets.QFileDialog选择目录并赋予self.tempSelectPath
            self.tempSelectPath = QtWidgets.QFileDialog.getExistingDirectory(None, '选择需要检索的文件目录', os.getcwd())
            # textedit里面填入路径
            self.selectPath.setText(self.tempSelectPath)
            # 该目录下所有文件的列表
            self.fileList = []
            self.filePath = []
            # 使用os.walk遍历文件夹下所有文件
            for root, dirs, files in os.walk(self.tempSelectPath):
                for file in files:
                    self.filePath.append(os.path.join(root, file))
                    self.fileList.append(file)
            num = 0  # 统计总数用
            self.listExistFile.clear()  # 清空列表内容
            for i in range(0, len(self.fileList)):
                num += 1
                self.item = QtWidgets.QListWidgetItem(self.listExistFile)  # 创建列表
                self.item.setText(self.filePath[i])
            self.statusbar.showMessage('此目录共有文件 ”' + str(num) + '“ 个')
        except Exception as e:
            QtWidgets.QMessageBox.warning(None, '警告', '请选择一个有效路径', QtWidgets.QMessageBox.Ok)
            print(e)

    def setExportPath(self):
        try:
            # 选择导出路径
            self.tempExportPath = QtWidgets.QFileDialog.getExistingDirectory(None, '选择检索结果保存的目录', os.getcwd())
            self.exportPath.setText(self.tempExportPath)
        except Exception as e:
            QtWidgets.QMessageBox.warning(None, '警告', '请选择一个有效路径', QtWidgets.QMessageBox.Ok)
            print(e)

    def exportFile(self):
        try:
            if os.path.isdir(self.selectPath.toPlainText()) and os.path.isdir(self.exportPath.toPlainText()):
                if self.bdNameText.toPlainText():
                    with open(self.exportPath.toPlainText() + '\\检索结果_' + self.bdNameText.toPlainText() + '.csv', 'w',
                              newline='') as f:
                        writer = csv.writer(f, dialect='excel')
                        for i in self.fileList:
                            writer.writerow([i])
                    QtWidgets.QMessageBox.information(None, '提示', '写入完成', QtWidgets.QMessageBox.Ok)
                else:
                    QtWidgets.QMessageBox.information(None, '提示', '请输入营业部全程', QtWidgets.QMessageBox.Ok)
            else:
                QtWidgets.QMessageBox.warning(None, '警告', '请检查检索目录或者保存路径是否填写', QtWidgets.QMessageBox.Ok)
        except Exception as e:
            QtWidgets.QMessageBox.warning(None, '警告', '请检查以上三个选项是否都填写正确', QtWidgets.QMessageBox.Ok)
            print(e)

    def itemClick(self):
        # 提供点击列表内的文件打开功能
        print('click' + self.item.text())
        os.startfile(self.tempSelectPath + '\\' + self.item.text())


if __name__ == '__main__':
    app = QApplication(sys.argv)
    mainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()
    sys.exit(app.exec_())
